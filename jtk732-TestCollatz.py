#!/usr/bin/env python3

# -------------------------------
# projects/collatz/TestCollatz.py
# Copyright (C) 2016
# Glenn P. Downing
# -------------------------------

# https://docs.python.org/3.4/reference/simple_stmts.html#grammar-token-assert_stmt

# -------
# imports
# -------

from io import StringIO
from unittest import main, TestCase

from Collatz import collatz_read, collatz_eval, collatz_print, collatz_solve, cycle_length, bottomTail, topTail, maxCycle

# -----------
# TestCollatz
# -----------


class TestCollatz (TestCase):
    # ----
    # read
    # ----

    def test_read(self):
        s = "1 10\n"
        i, j = collatz_read(s)
        self.assertEqual(i,  1)
        self.assertEqual(j, 10)

    # ----
    # eval
    # ----

    def test_eval_1(self):
        v = collatz_eval(2000, 320000)
        self.assertEqual(v, 443)

    def test_eval_2(self):
        v = collatz_eval(1, 9999)
        self.assertEqual(v, 262)

    def test_eval_3(self):
        v = collatz_eval(201, 210)
        self.assertEqual(v, 89)

    def test_eval_4(self):
        v = collatz_eval(900, 1000)
        self.assertEqual(v, 174)

    def test_eval_5(self):
        v = collatz_eval(900000, 950000)
        self.assertEqual(v, 507)

    def test_eval_6(self):
        v = collatz_eval(45000, 95000)
        self.assertEqual(v, 351)

    def test_eval_7(self):
        v = collatz_eval(30001, 1000000)
        self.assertEqual(v, 525)

    # -----
    # print
    # -----

    def test_print(self):
        w = StringIO()
        collatz_print(w, 1, 10, 20)
        self.assertEqual(w.getvalue(), "1 10 20\n")

    # -----
    # solve
    # -----

    def test_solve(self):
        r = StringIO("1 10\n100 200\n201 210\n900 1000\n")
        w = StringIO()
        collatz_solve(r, w)
        self.assertEqual(
            w.getvalue(), "1 10 20\n100 200 125\n201 210 89\n900 1000 174\n")

    def test_cycle_length0(self):
        v = cycle_length(325)
        self.assertEqual(v, 25)
        
    def test_cycle_length1(self):
        v = cycle_length(901000)
        self.assertEqual(v, 88)

    def test_cycle_length2(self):
        v = cycle_length(12345)
        self.assertEqual(v, 51)

    def test_bottom_tail0(self):
        maxCountList = [(10000, 262), (20000, 279), (30000, 308), (40000, 324),
                    (50000, 314), (60000, 340), (70000, 335), (80000, 351),
                    (90000, 333), (100000, 333), (110000, 354), (120000, 349),
                    (130000, 344), (140000, 344), (150000, 375), (160000, 383),
                    (170000, 370), (180000, 347), (190000, 365), (200000, 360),
                    (210000, 373), (220000, 386), (230000, 368), (240000, 443),
                    (250000, 368), (260000, 363), (270000, 407), (280000, 407),
                    (290000, 389), (300000, 371), (310000, 371), (320000, 384),
                    (330000, 384), (340000, 366), (350000, 441), (360000, 379),
                    (370000, 410), (380000, 423), (390000, 436), (400000, 405),
                    (410000, 405), (420000, 449), (430000, 418), (440000, 400),
                    (450000, 369), (460000, 387), (470000, 444), (480000, 382),
                    (490000, 413), (500000, 426), (510000, 426), (520000, 470),
                    (530000, 408), (540000, 377), (550000, 452), (560000, 421),
                    (570000, 421), (580000, 390), (590000, 434), (600000, 403),
                    (610000, 403), (620000, 447), (630000, 509), (640000, 416),
                    (650000, 416), (660000, 429), (670000, 442), (680000, 385),
                    (690000, 398), (700000, 442), (710000, 504), (720000, 411),
                    (730000, 411), (740000, 424), (750000, 393), (760000, 424),
                    (770000, 468), (780000, 437), (790000, 406), (800000, 468),
                    (810000, 406), (820000, 450), (830000, 450), (840000, 525),
                    (850000, 419), (860000, 419), (870000, 388), (880000, 432),
                    (890000, 445), (900000, 370), (910000, 445), (920000, 476),
                    (930000, 476), (940000, 507), (950000, 383), (960000, 414),
                    (970000, 414), (980000, 458), (990000, 427), (1000000, 440)]

        v,x = bottomTail(800,maxCountList)
        self.assertEqual(v, 10000)
        self.assertEqual(x, 0)

    def test_bottom_tail1(self):
        maxCountList = [(10000, 262), (20000, 279), (30000, 308), (40000, 324),
                    (50000, 314), (60000, 340), (70000, 335), (80000, 351),
                    (90000, 333), (100000, 333), (110000, 354), (120000, 349),
                    (130000, 344), (140000, 344), (150000, 375), (160000, 383),
                    (170000, 370), (180000, 347), (190000, 365), (200000, 360),
                    (210000, 373), (220000, 386), (230000, 368), (240000, 443),
                    (250000, 368), (260000, 363), (270000, 407), (280000, 407),
                    (290000, 389), (300000, 371), (310000, 371), (320000, 384),
                    (330000, 384), (340000, 366), (350000, 441), (360000, 379),
                    (370000, 410), (380000, 423), (390000, 436), (400000, 405),
                    (410000, 405), (420000, 449), (430000, 418), (440000, 400),
                    (450000, 369), (460000, 387), (470000, 444), (480000, 382),
                    (490000, 413), (500000, 426), (510000, 426), (520000, 470),
                    (530000, 408), (540000, 377), (550000, 452), (560000, 421),
                    (570000, 421), (580000, 390), (590000, 434), (600000, 403),
                    (610000, 403), (620000, 447), (630000, 509), (640000, 416),
                    (650000, 416), (660000, 429), (670000, 442), (680000, 385),
                    (690000, 398), (700000, 442), (710000, 504), (720000, 411),
                    (730000, 411), (740000, 424), (750000, 393), (760000, 424),
                    (770000, 468), (780000, 437), (790000, 406), (800000, 468),
                    (810000, 406), (820000, 450), (830000, 450), (840000, 525),
                    (850000, 419), (860000, 419), (870000, 388), (880000, 432),
                    (890000, 445), (900000, 370), (910000, 445), (920000, 476),
                    (930000, 476), (940000, 507), (950000, 383), (960000, 414),
                    (970000, 414), (980000, 458), (990000, 427), (1000000, 440)]

        v,x = bottomTail(95000,maxCountList)
        self.assertEqual(v, 100000)
        self.assertEqual(x, 9)

    def test_bottom_tail2(self):
        maxCountList = [(10000, 262), (20000, 279), (30000, 308), (40000, 324),
                    (50000, 314), (60000, 340), (70000, 335), (80000, 351),
                    (90000, 333), (100000, 333), (110000, 354), (120000, 349),
                    (130000, 344), (140000, 344), (150000, 375), (160000, 383),
                    (170000, 370), (180000, 347), (190000, 365), (200000, 360),
                    (210000, 373), (220000, 386), (230000, 368), (240000, 443),
                    (250000, 368), (260000, 363), (270000, 407), (280000, 407),
                    (290000, 389), (300000, 371), (310000, 371), (320000, 384),
                    (330000, 384), (340000, 366), (350000, 441), (360000, 379),
                    (370000, 410), (380000, 423), (390000, 436), (400000, 405),
                    (410000, 405), (420000, 449), (430000, 418), (440000, 400),
                    (450000, 369), (460000, 387), (470000, 444), (480000, 382),
                    (490000, 413), (500000, 426), (510000, 426), (520000, 470),
                    (530000, 408), (540000, 377), (550000, 452), (560000, 421),
                    (570000, 421), (580000, 390), (590000, 434), (600000, 403),
                    (610000, 403), (620000, 447), (630000, 509), (640000, 416),
                    (650000, 416), (660000, 429), (670000, 442), (680000, 385),
                    (690000, 398), (700000, 442), (710000, 504), (720000, 411),
                    (730000, 411), (740000, 424), (750000, 393), (760000, 424),
                    (770000, 468), (780000, 437), (790000, 406), (800000, 468),
                    (810000, 406), (820000, 450), (830000, 450), (840000, 525),
                    (850000, 419), (860000, 419), (870000, 388), (880000, 432),
                    (890000, 445), (900000, 370), (910000, 445), (920000, 476),
                    (930000, 476), (940000, 507), (950000, 383), (960000, 414),
                    (970000, 414), (980000, 458), (990000, 427), (1000000, 440)]

        v,x = bottomTail(95000,maxCountList)
        self.assertEqual(v, 100000)
        self.assertEqual(x, 9)

    def test_top_tail0(self):
        maxCountList = [(10000, 262), (20000, 279), (30000, 308), (40000, 324),
                    (50000, 314), (60000, 340), (70000, 335), (80000, 351),
                    (90000, 333), (100000, 333), (110000, 354), (120000, 349),
                    (130000, 344), (140000, 344), (150000, 375), (160000, 383),
                    (170000, 370), (180000, 347), (190000, 365), (200000, 360),
                    (210000, 373), (220000, 386), (230000, 368), (240000, 443),
                    (250000, 368), (260000, 363), (270000, 407), (280000, 407),
                    (290000, 389), (300000, 371), (310000, 371), (320000, 384),
                    (330000, 384), (340000, 366), (350000, 441), (360000, 379),
                    (370000, 410), (380000, 423), (390000, 436), (400000, 405),
                    (410000, 405), (420000, 449), (430000, 418), (440000, 400),
                    (450000, 369), (460000, 387), (470000, 444), (480000, 382),
                    (490000, 413), (500000, 426), (510000, 426), (520000, 470),
                    (530000, 408), (540000, 377), (550000, 452), (560000, 421),
                    (570000, 421), (580000, 390), (590000, 434), (600000, 403),
                    (610000, 403), (620000, 447), (630000, 509), (640000, 416),
                    (650000, 416), (660000, 429), (670000, 442), (680000, 385),
                    (690000, 398), (700000, 442), (710000, 504), (720000, 411),
                    (730000, 411), (740000, 424), (750000, 393), (760000, 424),
                    (770000, 468), (780000, 437), (790000, 406), (800000, 468),
                    (810000, 406), (820000, 450), (830000, 450), (840000, 525),
                    (850000, 419), (860000, 419), (870000, 388), (880000, 432),
                    (890000, 445), (900000, 370), (910000, 445), (920000, 476),
                    (930000, 476), (940000, 507), (950000, 383), (960000, 414),
                    (970000, 414), (980000, 458), (990000, 427), (1000000, 440)]

        v,x = topTail(12345,maxCountList)
        self.assertEqual(v, 10000)
        self.assertEqual(x, 0)


    def test_top_tail1(self):
        maxCountList = [(10000, 262), (20000, 279), (30000, 308), (40000, 324),
                    (50000, 314), (60000, 340), (70000, 335), (80000, 351),
                    (90000, 333), (100000, 333), (110000, 354), (120000, 349),
                    (130000, 344), (140000, 344), (150000, 375), (160000, 383),
                    (170000, 370), (180000, 347), (190000, 365), (200000, 360),
                    (210000, 373), (220000, 386), (230000, 368), (240000, 443),
                    (250000, 368), (260000, 363), (270000, 407), (280000, 407),
                    (290000, 389), (300000, 371), (310000, 371), (320000, 384),
                    (330000, 384), (340000, 366), (350000, 441), (360000, 379),
                    (370000, 410), (380000, 423), (390000, 436), (400000, 405),
                    (410000, 405), (420000, 449), (430000, 418), (440000, 400),
                    (450000, 369), (460000, 387), (470000, 444), (480000, 382),
                    (490000, 413), (500000, 426), (510000, 426), (520000, 470),
                    (530000, 408), (540000, 377), (550000, 452), (560000, 421),
                    (570000, 421), (580000, 390), (590000, 434), (600000, 403),
                    (610000, 403), (620000, 447), (630000, 509), (640000, 416),
                    (650000, 416), (660000, 429), (670000, 442), (680000, 385),
                    (690000, 398), (700000, 442), (710000, 504), (720000, 411),
                    (730000, 411), (740000, 424), (750000, 393), (760000, 424),
                    (770000, 468), (780000, 437), (790000, 406), (800000, 468),
                    (810000, 406), (820000, 450), (830000, 450), (840000, 525),
                    (850000, 419), (860000, 419), (870000, 388), (880000, 432),
                    (890000, 445), (900000, 370), (910000, 445), (920000, 476),
                    (930000, 476), (940000, 507), (950000, 383), (960000, 414),
                    (970000, 414), (980000, 458), (990000, 427), (1000000, 440)]

        v,x = topTail(999000,maxCountList)
        self.assertEqual(v, 990000)
        self.assertEqual(x, 98)

    def test_top_tail2(self):
        maxCountList = [(10000, 262), (20000, 279), (30000, 308), (40000, 324),
                    (50000, 314), (60000, 340), (70000, 335), (80000, 351),
                    (90000, 333), (100000, 333), (110000, 354), (120000, 349),
                    (130000, 344), (140000, 344), (150000, 375), (160000, 383),
                    (170000, 370), (180000, 347), (190000, 365), (200000, 360),
                    (210000, 373), (220000, 386), (230000, 368), (240000, 443),
                    (250000, 368), (260000, 363), (270000, 407), (280000, 407),
                    (290000, 389), (300000, 371), (310000, 371), (320000, 384),
                    (330000, 384), (340000, 366), (350000, 441), (360000, 379),
                    (370000, 410), (380000, 423), (390000, 436), (400000, 405),
                    (410000, 405), (420000, 449), (430000, 418), (440000, 400),
                    (450000, 369), (460000, 387), (470000, 444), (480000, 382),
                    (490000, 413), (500000, 426), (510000, 426), (520000, 470),
                    (530000, 408), (540000, 377), (550000, 452), (560000, 421),
                    (570000, 421), (580000, 390), (590000, 434), (600000, 403),
                    (610000, 403), (620000, 447), (630000, 509), (640000, 416),
                    (650000, 416), (660000, 429), (670000, 442), (680000, 385),
                    (690000, 398), (700000, 442), (710000, 504), (720000, 411),
                    (730000, 411), (740000, 424), (750000, 393), (760000, 424),
                    (770000, 468), (780000, 437), (790000, 406), (800000, 468),
                    (810000, 406), (820000, 450), (830000, 450), (840000, 525),
                    (850000, 419), (860000, 419), (870000, 388), (880000, 432),
                    (890000, 445), (900000, 370), (910000, 445), (920000, 476),
                    (930000, 476), (940000, 507), (950000, 383), (960000, 414),
                    (970000, 414), (980000, 458), (990000, 427), (1000000, 440)]

        v,x = topTail(50000,maxCountList)
        self.assertEqual(v, 50000)
        self.assertEqual(x, 4)

    def test_maxCycle0(self):
        v = maxCycle(1,100)
        self.assertEqual(v,119 )

    def test_maxCycle1(self):
        v = maxCycle(12345,678910)
        self.assertEqual(v,509 )

    def test_maxCycle2(self):
        v = maxCycle(123,999)
        self.assertEqual(v,179 )


    exit()

# ----
# main
# ----

if __name__ == "__main__":
    main()

""" #pragma: no cover
% coverage-3.5 run --branch TestCollatz.py >  TestCollatz.out 2>&1


% cat TestCollatz.out
.......
----------------------------------------------------------------------
Ran 7 tests in 0.000s
OK


% coverage-3.5 report -m                   >> TestCollatz.out



% cat TestCollatz.out
.......
----------------------------------------------------------------------
Ran 7 tests in 0.000s
OK
Name             Stmts   Miss Branch BrPart  Cover   Missing
------------------------------------------------------------
Collatz.py          12      0      2      0   100%
TestCollatz.py      32      0      0      0   100%
------------------------------------------------------------
TOTAL               44      0      2      0   100%
"""
